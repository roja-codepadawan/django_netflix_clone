# Generated by Django 4.2.7 on 2023-12-06 10:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.CharField(blank=True, choices=[('Studierende', 'Studierende'), ('Mitarbeiter', 'Mitarbeiter')], default='Studierende', max_length=20, null=True, verbose_name='User Status')),
                ('institut', models.CharField(blank=True, choices=[('Willkommen', 'Willkommen'), ('IDP', 'IDP'), ('IDM', 'IDM')], default='Willkommen', max_length=20, null=True, verbose_name='Institut')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=225, null=True)),
            ],
            options={
                'verbose_name_plural': 'Kurse',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=225, null=True)),
                ('file', models.FileField(upload_to='movies')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=None, unique=True)),
                ('age', models.CharField(blank=True, choices=[('Studierende', 'Studierende'), ('Mitarbeiter', 'Mitarbeiter')], default='Studierende', max_length=20, null=True)),
                ('institut', models.CharField(blank=True, choices=[('Willkommen', 'Willkommen'), ('IDP', 'IDP'), ('IDM', 'IDM')], default='Willkommen', max_length=20, null=True)),
                ('courses', models.ManyToManyField(to='core.course', verbose_name='Kurse')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=225, null=True)),
                ('description', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=None, unique=True)),
                ('flyer', models.ImageField(blank=True, null=True, upload_to='flyers')),
                ('type', models.CharField(choices=[('single', 'Single'), ('seasonal', 'Seasonal')], help_text='Einzel Film oder Serie(Veranstaltungsreihe)', max_length=10)),
                ('age_limit', models.CharField(blank=True, choices=[('Studierende', 'Studierende'), ('Mitarbeiter', 'Mitarbeiter')], max_length=20, null=True, verbose_name='Status')),
                ('institut', models.CharField(blank=True, choices=[('Willkommen', 'Willkommen'), ('IDP', 'IDP'), ('IDM', 'IDM')], max_length=20, null=True, verbose_name='Institut')),
                ('categories', models.CharField(blank=True, choices=[('Willkommen', 'Willkommen'), ('Dokumentarfilm', 'Dokumentarfilm'), ('Physik', 'Physik'), ('Mathematik', 'Mathematik'), ('Informatik', 'Informatik'), ('Kunstgeschichte', 'Kunstgeschichte'), ('Chemie', 'Chemie'), ('Biologie', 'Biologie'), ('Wirtschaft', 'Wirtschaft'), ('Literatur', 'Literatur'), ('Geschichte', 'Geschichte')], max_length=20, null=True, verbose_name='Kategorie')),
                ('courses', models.ManyToManyField(to='core.course', verbose_name='Kurse')),
                ('videos', models.ManyToManyField(to='core.video')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='courses',
            field=models.ManyToManyField(to='core.course', verbose_name='Kurse'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='profiles',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.profile'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
